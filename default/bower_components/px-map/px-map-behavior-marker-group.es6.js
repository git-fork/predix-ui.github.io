(function(){'use strict';window.PxMapBehavior=window.PxMapBehavior||{},PxMapBehavior.MarkerGroupImpl={properties:{name:{type:String,notify:!0},data:{type:Object,observer:'shouldUpdateInst'},_colorsByType:{type:Object,value:function(){return{}}},colorsByType:{type:Object,value:function(){return{}},observer:'_calculateColorsByType'},iconFns:{type:Object,value:function(){return{cluster:void 0,marker:void 0}}},clusterConfig:{type:Object}},update(){if(this.elementInst){const{data:a}=this.getInstOptions(),b=this._syncDataWithMarkers(a.features,this.elementInst);this._notifyNewFeatures(b)}},redraw(){this.elementInst&&(this._clearAllMarkersAndData(this.elementInst),this.update())},addInst(a){const b=this._handleClusterSpiderify.bind(this),c=this._handleClusterUnspiderify.bind(this),d=this._handleSingleMarkerTap.bind(this),e=this._handleSingleMarkerDoubleClick.bind(this),f=this._handleClusterTap.bind(this);this.bindEvents({spiderfied:b,unspiderfied:c,click:d,dblclick:e,clusterclick:f}),PxMapBehavior.LayerImpl.addInst.call(this,a),this.async(function(){this.fire('px-map-marker-group-added')})},removeInst(a){PxMapBehavior.LayerImpl.removeInst.call(this,a)},createInst(a={}){const b=L.markerClusterGroup(a);if(a.data){const c=this._syncDataWithMarkers(a.data.features,b);this._notifyNewFeatures(c)}return b},updateInst(a,b){if(b.data){const a=this._syncDataWithMarkers(b.data.features,this.elementInst);this._notifyNewFeatures(a)}},getInstOptions(){const a={showCoverageOnHover:!0,maxClusterRadius:150,spiderifyOnMaxZoom:!0,removeOutsideVisibleBounds:!0,animate:!0,polygonOptions:{stroke:!0,color:this.getComputedStyleValue('--internal-px-map-marker-group-cluster-polygon-stroke-color'),fillColor:this.getComputedStyleValue('--internal-px-map-marker-group-cluster-polygon-fill-color'),fillOpacity:0.4}},b=Object.assign(a,this.clusterConfig||{});return b.data=this._getValidData(),b.iconCreateFunction=this._createClusterIcon.bind(this),b},_notifyNewFeatures(a){a&&a instanceof Set&&a.size&&this.async(function(){const b=L.latLngBounds();let c;for(c of a)b.extend([c.geometry.coordinates[1],c.geometry.coordinates[0]]);this.fire('px-map-marker-group-features-changed',{bounds:b})},1)},_getValidData(){if(this.data){const a='object'!==typeof this.data||'FeatureCollection'!==this.data.type||!Array.isArray(this.data.features)||!this.data.features.length||'object'!==typeof this.data.features[0];return a?void console.log(`PX-MAP CONFIGURATION ERROR:
          The \`data\` attribute for ${this.is} is not valid GeoJSON. Valid GeoJSON
          that follows the FeatureCollection standard is required to draw the
          marker clusters. See the GeoJSON spec website (http://geojson.org/geojson-spec.html)
          for more information on what is required.

          The minimum requirements for ${this.is} are:
          - Must be a valid JavaScript object (or deserializable to an object)
          - Must have key \`type\` with value 'FeatureCollection'
          - Must have key \`features\` with value of an array with length
          - Each entry in \`features\` must be a valid object
        `):this.data}},created:function(){var a=this.updateStyles;this.updateStyles=this._handleStylesUpdated.bind(this),this._updateStylesFn=a},_handleStylesUpdated:function(){this._updateStylesFn(),this._calculateColorsByType(this.colorsByType)},_createClusterIcon(a){if(this.iconFns.cluster)return this.iconFns.cluster.call(this,a);const b=a.getAllChildMarkers(),c=b.length,d=this._indexClusterMarkersByType(b);let e=this._colorsByType;const f=this._getClusterIconSize(c),g=this._getStyleValueAsNum('--internal-px-map-marker-group-cluster-path-size')||10,h=this._getStyleValueAsNum('--internal-px-map-marker-group-cluster-border-size')||0,i={count:c,countByType:d,colorsByType:e,containerSize:f,pathSize:g,borderSize:h,styleScope:this.isShadyScoped()?this.getShadyScope():void 0};return new PxMap.ClusterIcon(i)},_calculateColorsByType:function(a){var b=Object.assign({},this._getAllIconColors(),a||{}),c=JSON.stringify(this._colorsByType);JSON.stringify(b)!==c&&(this._colorsByType=b,'{}'!==c&&this.redraw())},_getAllIconColors:function(){var a={info:this.getComputedStyleValue('--internal-px-map-icon-info-color'),warning:this.getComputedStyleValue('--internal-px-map-icon-warning-color'),important:this.getComputedStyleValue('--internal-px-map-icon-important-color'),unknown:this.getComputedStyleValue('--internal-px-map-icon-unknown-color')};let b;for(let c=0;101>c&&(b=this.getComputedStyleValue(`--px-map-color-custom-${c}`),b&&''!==b);c++)a[`custom-${c}`]=b;return a},_getStyleValueAsNum(a){if(this.__styleVals=this.__styleVals||{},this.__styleVals[a])return this.__styleVals[a];const b=this.getComputedStyleValue(a);if(b&&-1!==b.indexOf('px')){const c=b.replace('px',''),d=Math.floor(c);return this.__styleVals[a]=d,d}},_getClusterIconSize(a){return 10>a?60:10<=a&&40>a?75:40<a?90:void 0},_indexClusterMarkersByType(a){return a.reduce((a,b)=>(b.featureProperties&&b.featureProperties['marker-icon']&&b.featureProperties['marker-icon']['icon-type']&&(a[b.featureProperties['marker-icon']['icon-type']]=(a[b.featureProperties['marker-icon']['icon-type']]||0)+1),a),{})},_clearAllMarkersAndData:function(a){a.clearLayers(),this._features=null,this._markers=null},_syncDataWithMarkers(a,b){if(!a.length)return;const c=this._features=this._features||new Set,d=this._markers=this._markers||new WeakMap,{featuresToAdd:e,featuresToUpdate:f,featuresToRemove:g,nextFeaturesSet:h,nextMarkersMap:i}=this._diffNewFeatures(a,c,d);let j,k,l;if(e.size){l=[];for(j of e)k=i.get(j),k.marker=this._createMarker(j),l.push(k.marker),i.set(j,k);b.addLayers(l),l=null}if(f.size){l=[];for(j of f)k=i.get(j),k.marker=this._updateMarker(j,k.marker),l.push(k.marker),i.set(j,k);b.refreshClusters(l),l=null}if(g.size){l=[];for(j of g)k=i.get(j),l.push(k.marker),i.delete(j);b.removeLayers(l),l=null}return this._features=h,this._markers=i,c.clear(),e.clear(),f.clear(),g.clear(),this._features},_diffNewFeatures(a,b,c){const d=new Set,e=new Set,f=new Set;let g,h,i,j,k,l;for(g=0,h=a.length;g<h;g++)if(i=a[g].id&&a[g].geometry&&'Point'===a[g].geometry.type&&a[g].geometry.coordinates instanceof Array&&2===a[g].geometry.coordinates.length,i){if(j=b.has(a[g]),!j){e.add(a[g]),b.delete(a[g]),d.add(a[g]),k={marker:null,hash:JSON.stringify(a[g])},c.set(a[g],k);continue}j&&(k=c.get(a[g]),l=JSON.stringify(a[g]),k.hash!==l&&(f.add(a[g]),k.hash=l,c.set(a[g],k)),b.delete(a[g]),d.add(a[g]))}const m=b.size?b:new Set;return b=null,{featuresToAdd:e,featuresToUpdate:f,featuresToRemove:m,nextFeaturesSet:d,nextMarkersMap:c}},_createMarker(a){const[b,c]=a.geometry.coordinates,d=L.marker([c,b]),e=a.properties['marker-icon']?this._extractMarkerIconSettings(a.properties['marker-icon']):{};e.base=e.base||'static-icon',e.type=e.type||'info',e.color=this._colorsByType[e.type]||'black';const f=this._createMarkerIcon(e);return d.setIcon(f),d.featureProperties=a.properties,d},_updateMarker(a,b){const{lat:c,lng:d}=b.getLatLng(),[e,f]=a.geometry.coordinates;(c!==+f||d!==+e)&&b.setLatLng([f,e]);const g=a.properties['marker-icon']?this._extractMarkerIconSettings(a.properties['marker-icon']):{};g.base=g.base||'static-icon',g.type=g.type||'info';const h=this._createMarkerIcon(g);return b.setIcon(h),b.featureProperties=a.properties,b},_extractMarkerIconSettings(a){const b=Object.keys(a);if(!b.length)return;const c={};let d,e,f;for(d=0,e=b.length;d<e;d++)'icon-'===b[d].substring(0,5)&&(f=b[d].substring(5).replace(/(\-[a-z])/g,(a)=>a.charAt(1).toUpperCase()),c[f]=a[b[d]]);return c},_createMarkerIcon(a){if(this.iconFns.marker)return this.iconFns.marker.call(this,a);a.styleScope=this.isShadyScoped()?this.getShadyScope():void 0;const b=this._strToKlassName(a.base);return new PxMap[b](a)},_strToKlassName(a){return a.charAt(0).toUpperCase()+a.substring(1).replace(/(\-[a-z])/g,(a)=>a.charAt(1).toUpperCase())},_handleClusterSpiderify(a){a&&a.cluster&&a.cluster._icon&&(a.cluster._icon.style.visibility='hidden')},_handleClusterUnspiderify(a){a&&a.cluster&&a.cluster._icon&&(a.cluster._icon.style.visibility='visible')},_handleSingleMarkerTap(a){if(a.layer&&a.layer.getLatLng()instanceof L.LatLng){const b=L.latLng(a.layer.getLatLng()),{lat:c,lng:d}=b,e={latLng:b,lat:c,lng:d,feature:a.layer.featureProperties?a.layer.featureProperties:void 0};this.fire('px-map-marker-group-marker-tapped',e)}a.layer&&a.layer.featureProperties&&a.layer.featureProperties.hasOwnProperty('marker-popup')&&this._bindAndOpenPopup(a.layer)},_handleSingleMarkerDoubleClick(a){const b=L.latLng(a.layer.getLatLng()),{lat:c,lng:d}=b,e={latLng:b,lat:c,lng:d,feature:a.layer.featureProperties?a.layer.featureProperties:void 0};this.fire('px-map-marker-group-marker-double-clicked',e)},_handleClusterTap(a){const b=a.layer.getBounds(),c=a.layer.getAllChildMarkers(),d=[];for(let b=0;b<c.length;b++)d.push(c[b].featureProperties);this.fire('px-map-marker-group-cluster-tapped',{bounds:b,features:d})},_bindAndOpenPopup(a){if(a&&a.bindPopup&&a.openPopup){const b=this._featSettingsToProps(a.featureProperties['marker-popup'],'popup');if(b&&Object.keys(b).length){const c=b._Base&&PxMap.hasOwnProperty(b._Base)?b._Base:'InfoPopup',d=new PxMap[c](b);a.bindPopup(d).openPopup(),a.__boundCloseFn=this._unbindAndClosePopup.bind(this,a),a.on('popupclose',a.__boundCloseFn)}}},_unbindAndClosePopup(a){a&&a.getPopup&&a.getPopup()&&(a.off('popupclose',a.__boundCloseFn),a.__boundCloseFn=null,a.closePopup().unbindPopup())},_featSettingsToProps(a,b){const c=Object.keys(a);if(c.length){const d={};for(let e,f=0,g=c.length;f<g;f++)if(!(b&&c[f].substr(0,b.length)!==b)){if(/^[A-Za-z]+\-base$/.test(c[f])){d._Base=this._strToKlassName(a[c[f]]);continue}e=c[f].replace(/^[A-Za-z]+\-(.*)$/,'$1'),d[e]=a[c[f]]}return d}}},PxMapBehavior.MarkerGroup=[PxMapBehavior.Layer,PxMapBehavior.MarkerGroupImpl]})();