(function(){'use strict';window.PxMapBehavior=window.PxMapBehavior||{},PxMapBehavior.GeoJSONLayerImpl={properties:{data:{type:Object,observer:'shouldUpdateInst'},featureStyle:{type:Object,observer:'shouldUpdateInst'},showFeatureProperties:{type:Boolean,value:!1,observer:'shouldUpdateInst'}},update(){this.elementInst&&this.shouldUpdateInst()},canAddInst(){return this.data&&'object'===typeof this.data&&Object.keys(this.data).length},addInst(a){const b=this._handleFeatureAdded.bind(this),c=this._handleFeatureRemoved.bind(this);this.bindEvents({layeradd:b,layerremove:c}),0!==this.elementInst.getLayers().length&&this.elementInst.eachLayer((a)=>{this.elementInst.fire('layeradd',{layer:a})}),PxMapBehavior.LayerImpl.addInst.call(this,a)},createInst(a){const b=this.getInstOptions().featureStyle,c=L.geoJson(a.data,{pointToLayer:(b,c)=>{const d=b.properties.style||{},e=a.featureStyle,f=this._getStyle(b,d,e);return new L.CircleMarker(c,f)},onEachFeature:(a,b)=>{this.showFeatureProperties&&this._bindPopup(a,b)},style:(a)=>{const c=a.properties.style||{};return this._getStyle(c,b)}});return c},_getStyle(a,b){return{radius:a.radius||b.radius||5,color:a.color||b.color||'#3E87E8',fillColor:a.fillColor||b.fillColor||'#88BDE6',weight:a.weight||b.weight||2,opacity:a.opacity||b.opacity||1,fillOpacity:a.fillOpacity||b.fillOpacity||0.4}},_bindFeaturePopups(){this.elementInst&&this.elementInst.eachLayer((a)=>this._bindPopup(a.feature,a))},_bindPopup(a,b){const c=Object.keys(a.properties).filter((b)=>a.properties.hasOwnProperty(b)&&'unset'!==a.properties[b]&&'style'!==b);if(c.length){const d=c.reduce((b,c)=>(b[c]=a.properties[c],b),{}),e=new PxMap.DataPopup({title:'Feature Properties',data:d,autoPanPadding:[1,1]});b.bindPopup(e)}},_unbindFeaturePopups(){this.elementInst&&this.elementInst.eachLayer((a)=>this._unbindPopup(a))},_unbindPopup(a){'undefined'!==typeof a.getPopup()&&a.unbindPopup()},updateInst(a,b){if(!Object.keys(b.data).length)this.elementInst.clearLayers();else if(Object.keys(b.data).length&&(a.dataHash!==b.dataHash||a.featureStyleHash!==b.featureStyleHash)){const a=this.getInstOptions().featureStyle;this.elementInst.clearLayers(),this.elementInst.options.style=(b)=>{const c=b.properties.style||{};return this._getStyle(c,a)},this.elementInst.addData(b.data),b.showFeatureProperties&&this._bindFeaturePopups()}else a.showFeatureProperties!==b.showFeatureProperties&&(b.showFeatureProperties&&this._bindFeaturePopups(),b.showFeatureProperties||this._unbindFeaturePopups())},getInstOptions(){return{data:this.data||{},dataHash:JSON.stringify(this.data||{}),featureStyle:this.featureStyle||{},featureStyleHash:JSON.stringify(this.featureStyle||{}),showFeatureProperties:this.showFeatureProperties}},_handleFeatureAdded(a){if(a&&a.layer){a.layer.on('click',this._handleFeatureTapped.bind(this)),a.layer.on('popupopen',this._handleFeaturePopupOpened.bind(this)),a.layer.on('popupclose',this._handleFeaturePopupClosed.bind(this));const b={};a.layer&&a.layer.feature&&(b.feature=a.layer.feature),this.fire('px-map-layer-geojson-feature-added',b)}},_handleFeatureRemoved(a){if(a&&a.layer){a.layer.off();const b={};a.layer&&a.layer.feature&&(b.feature=a.layer.feature),this.fire('px-map-layer-geojson-feature-removed',b)}},_handleFeatureTapped(a){const b={};a.target&&a.target.feature&&(b.feature=a.target.feature),this.fire('px-map-layer-geojson-feature-tapped',b)},_handleFeaturePopupOpened(a){const b={};a.target&&a.target.feature&&(b.feature=a.target.feature),this.fire('px-map-layer-geojson-feature-popup-opened',b)},_handleFeaturePopupClosed(a){const b={};a.target&&a.target.feature&&(b.feature=a.target.feature),this.fire('px-map-layer-geojson-feature-popup-closed',b)}},PxMapBehavior.GeoJSONLayer=[PxMapBehavior.Layer,PxMapBehavior.GeoJSONLayerImpl]})();